# .gitlab-ci.yml
# GitLab CI/CD pipeline configuration for Terraform-based EKS infrastructure automation

# Global variables
variables:
  AWS_REGION: "us-east-1"
  TF_BACKEND_BUCKET: "eks-terraform-state"
  TF_BACKEND_DYNAMODB_TABLE: "eks-terraform-lock"
  SLACK_CHANNEL: "#eks-infra-automation"
  TERRAFORM_VERSION: "1.5.7"
  CHECKOV_VERSION: "2.5.0"
  TERRATEST_GO_VERSION: "1.20"

# Define pipeline stages
stages:
  - init
  - validate
  - plan
  - test
  - approve
  - apply
  - drift_detection
  - state_backup

# Cache Terraform provider plugins and Go modules
cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .terraform/
    - tests/terratest/vendor/

# Default image for jobs
image: hashicorp/terraform:${TERRAFORM_VERSION}

# Workflow rules to control pipeline execution
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^(main|dev|staging|prod)$/'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

# Before script to set up AWS credentials and environment
before_script:
  - apk add --no-cache bash curl python3 py3-pip jq
  - pip3 install awscli
  - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
  - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
  - export AWS_DEFAULT_REGION=$AWS_REGION

# Job: Initialize Terraform
terraform_init:
  stage: init
  script:
    - terraform init -backend-config="bucket=${TF_BACKEND_BUCKET}" 
      -backend-config="dynamodb_table=${TF_BACKEND_DYNAMODB_TABLE}" 
      -backend-config="region=${AWS_REGION}"
  artifacts:
    paths:
      - .terraform/
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|dev|staging|prod)$/ || $CI_PIPELINE_SOURCE == "merge_request_event"'

# Job: Validate Terraform configuration
terraform_validate:
  stage: validate
  script:
    - terraform validate
    - terraform fmt -check -recursive
  dependencies:
    - terraform_init
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|dev|staging|prod)$/ || $CI_PIPELINE_SOURCE == "merge_request_event"'

# Job: Plan Terraform changes
terraform_plan:
  stage: plan
  script:
    - terraform plan -out=tfplan -var-file=terraform.tfvars
    - terraform show -json tfplan > tfplan.json
  artifacts:
    paths:
      - tfplan
      - tfplan.json
    expire_in: 1 week
  dependencies:
    - terraform_validate
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|dev|staging|prod)$/ || $CI_PIPELINE_SOURCE == "merge_request_event"'

# Job: Run Checkov for security scans
checkov_scan:
  stage: test
  image: bridgecrew/checkov:${CHECKOV_VERSION}
  script:
    - checkov -d . --output-file-path checkov-report.json
  artifacts:
    paths:
      - checkov-report.json
    expire_in: 1 week
  dependencies:
    - terraform_plan
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|dev|staging|prod)$/ || $CI_PIPELINE_SOURCE == "merge_request_event"'

# Job: Run Terratest for functional validation
terratest:
  stage: test
  image: golang:${TERRATEST_GO_VERSION}
  script:
    - cd tests/terratest
    - go mod tidy
    - go test -v ./... -timeout 30m
  artifacts:
    paths:
      - tests/terratest/test_output/
    expire_in: 1 week
  dependencies:
    - terraform_plan
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|dev|staging|prod)$/ || $CI_PIPELINE_SOURCE == "merge_request_event"'

# Job: Manual approval for staging/prod
approve_deployment:
  stage: approve
  script:
    - echo "Waiting for manual approval for $CI_COMMIT_BRANCH deployment"
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(staging|prod)$/'

# Job: Apply Terraform changes
terraform_apply:
  stage: apply
  script:
    - terraform apply -auto-approve tfplan
    - curl -X POST -H 'Content-type: application/json' 
      --data "{\"text\":\"Terraform apply completed for ${CI_COMMIT_BRANCH} in project ${CI_PROJECT_NAME}\"}" 
      $SLACK_WEBHOOK_URL
  dependencies:
    - terraform_plan
    - approve_deployment
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|dev|staging|prod)$/'

# Job: Drift detection
drift_detection:
  stage: drift_detection
  script:
    - ./scripts/drift-detection.sh .
    - |
      if [ -s drift-report.txt ]; then
        curl -X POST -H 'Content-type: application/json' 
        --data "{\"text\":\"Drift detected in ${CI_COMMIT_BRANCH}! Check pipeline for details.\"}" 
        $SLACK_WEBHOOK_URL
      fi
  artifacts:
    paths:
      - drift-report.txt
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH =~ /^(main|staging|prod)$/'

# Job: State backup
state_backup:
  stage: state_backup
  script:
    - ./scripts/state-backup.sh
    - curl -X POST -H 'Content-type: application/json' 
      --data "{\"text\":\"Terraform state backed up for ${CI_COMMIT_BRANCH} in project ${CI_PROJECT_NAME}\"}" 
      $SLACK_WEBHOOK_URL
  artifacts:
    paths:
      - state-backup.log
    expire_in: 1 month
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH =~ /^(main|staging|prod)$/'

# Scheduled pipelines for drift detection and state backup
schedules:
  - description: "Daily drift detection"
    ref: main
    cron: "0 2 * * *"
    cron_timezone: UTC
    stages:
      - drift_detection
  - description: "Daily state backup"
    ref: main
    cron: "0 3 * * *"
    cron_timezone: UTC
    stages:
      - state_backup
